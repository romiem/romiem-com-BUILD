(this["webpackJsonpromiem-com"]=this["webpackJsonpromiem-com"]||[]).push([[240],{392:function(e,t,n){"use strict";n.r(t),n.d(t,"AnimatingReactRouterRoute",(function(){return s}));n(0);var o=n(13),i=n(30),a=n(1),s=function(e){var t=i.a.ANIMATING_REACT_ROUTER;return Object(a.jsx)(o.m,{className:"AnimatingReactRouterRoute",children:Object(a.jsx)(o.c,{article:t,children:Object(a.jsxs)(o.d,{children:[Object(a.jsx)("p",{className:"mxn__fontLeading",children:"Animating between routes using react-router, for me, has always been a pain in the backside. The awful react-transition-group documentation, coupled with out-of-date blog posts and difficulty in debugging issues, at times left me wanting to take a hammer to my monitor."}),Object(a.jsx)("p",{children:"I've not liked some of the existing solutions because they use absolute positioning to achieve cross-fades between routes (which have caused more headaches e.g. FOUC), or they do not cater for the fact that content may be lazy loaded. I'm not proclaiming that my solution trumps all, but it has worked for me in both personal and client projects."}),Object(a.jsx)("p",{children:"This post assumes that you are:"}),Object(a.jsxs)("ul",{className:"bulletList",children:[Object(a.jsx)("li",{children:"using a recent version of react (16.10.2), react-router (5.1.2) and react-transition-group (4.3.0) - bracketed versions are what I used at the time of writing this article"}),Object(a.jsx)("li",{children:"lazy-loading your route components (although this method will work without lazy-loading)"}),Object(a.jsx)("li",{children:"are not looking to cross-fade your route transitions and fading out the first route before animating in the next one"}),Object(a.jsx)("li",{children:"building your app in TypeScript - if not, it's straightforward enough to convert into regular JS"}),Object(a.jsx)("li",{children:"using a browser that wasn't built in the 18th century"})]}),Object(a.jsx)("h2",{children:"App.tsx"}),Object(a.jsx)("p",{children:"In your App.tsx or similar entry point for your routes, enclose your Switch component inside the TransitionGroup and CSSTransition components like so:"}),Object(a.jsx)(o.g,{language:"tsx",code:r}),Object(a.jsx)("p",{children:"Note that we have set the timeout prop, which is defining how long we want the 'enter' and 'exit' animations to take. In this case, entering will take 1s long and exiting 0.2s. This will need to match up to the animation-duration that you will define in your SCSS later."}),Object(a.jsx)("h2",{children:"Helpers.scss"}),Object(a.jsxs)("p",{children:["I usually keep ",Object(a.jsx)("strong",{children:"global"})," styles in a root-level styles folder (component styles live alongside the component). This contains basic site setup, SCSS variables, mixins, and utility/helper classes. I also like to prefix any animation utility classes with 'a-'."]}),Object(a.jsx)(o.g,{language:"scss",code:c}),Object(a.jsx)("p",{children:"The reason why animation is used over transition is threefold:"}),Object(a.jsxs)("ul",{children:[Object(a.jsx)("li",{children:"Transitions do not execute if the class is already applied when the component mounts. Animations, on the other hand, run perfectly even if the class is already applied at mount time."}),Object(a.jsx)("li",{children:"The transitions could have already started whilst the route component is being lazy-loaded- we want to delay executing the transition until the route has been fetched."}),Object(a.jsx)("li",{children:"the CSSTransition component will apply the fade-enter and fade-enter-active classes to the Suspense fallback component instead of the Route component (because the fallback component will be shown whilst the route component is being fetched)."})]}),Object(a.jsx)("p",{children:"Finally, you can see the fade-in animation takes 1s in total to complete (0.75s transition + 0.25s delay). We delay by 0.25s to give the exit animation (0.2s duration) enough time to complete, before we start our entry animation."}),Object(a.jsx)("h2",{children:"HomeRoute.tsx"}),Object(a.jsx)("p",{children:"All that is left to do now is apply our animation utility class to each of your routes."}),Object(a.jsx)(o.g,{language:"tsx",code:l}),Object(a.jsx)("p",{children:"This animation will execute as soon as your route component has been lazy loaded and mounted."}),Object(a.jsxs)("p",{children:["I hope this helps somebody out - let me know on ",Object(a.jsx)(o.h,{className:"u-anchor u-anchor--accent u-anchor--underline",href:"https://twitter.com/romiem",children:"Twitter (@romiem)"})," if you found this helpful or are using a similar solution!"]})]})})})},r='export const App: React.FC = () => {\n   const location = useLocation();\n   return (\n     <div className="App">\n       <TransitionGroup>\n         <CSSTransition\n           key={location.pathname}\n           classNames="fade"\n           timeout={{ enter: 1000, exit: 200 }}>\n           <Suspense fallback={<Loading />}>\n             <Switch location={location}>\n               <Route\n                 path="/" exact\n                 component={React.lazy(() => import(\'./Home/HomeRoute\'))}\n               />\n               <Route\n                 path="/test"\n                 component={React.lazy(() => import(\'./Test/TestRoute\'))}\n               />\n             </Switch>\n           </Suspense>\n         </CSSTransition>\n       </TransitionGroup>\n     </div>\n   );\n };',c=".a-routeFadeIn {\n   animation: a-routeFadeIn 0.75s ease-in-out 0.25s;\n   animation-fill-mode: both;\n }\n\n @keyframes a-routeFadeIn {\n   0% {\n     opacity: 0;\n     transform: translateY(30px);\n     height: 0;\n     overflow: hidden;\n   }\n   0.01% {\n     height: auto;\n     overflow: visible;\n   }\n   100% {\n     opacity: 1;\n     transform: translateY(0);\n   }\n }\n\n .a-routeFadeIn.fade-exit {\n   animation: none;\n   animation-fill-mode: none;\n   opacity: 1;\n   transition: opacity 0.2s ease-in-out;\n }\n\n .a-routeFadeIn.fade-exit-active {\n   opacity: 0;\n }",l='export const HomeRoute: React.FC<RouteProps> = (props) => {\n   return (\n     <div className="HomeRoute a-routeFadeIn">\n      <h1>Home</h1>\n     </div>\n   );\n };';t.default=s}}]);
//# sourceMappingURL=240.368a6fd8.chunk.js.map